#===============================================================================
# @brief    Scons make file
# Copyright (c) 2016 NEUL LIMITED
#===============================================================================

Import('env')
import os
from EnvironmentUtils import NeulTargetConfig, BuildType
from ModuleUtils import Module

core = NeulTargetConfig.get_build_core(env)
chip = NeulTargetConfig.get_build_chip(env)
chip_family = NeulTargetConfig.get_build_chip_family(env)
module = 'config_vectors'

# Export headers.
public_include_dirs =[]
public_include_dirs.extend( [ os.path.join(Dir('.').srcnode().abspath, chip, core ) ])
public_include_dirs.extend( [ os.path.join(Dir('.').srcnode().abspath, chip_family, 'shared' ) ])

# Gather all source files. Note we don't want to build lots of small libraries, so simply gather the sources together
source_files = []
source_files.extend(Glob(os.path.join(chip, core, '*.c')))
source_files.extend(Glob(os.path.join(chip_family, 'shared', '*.c')))

if NeulTargetConfig.get_build_type(env) in [BuildType.SOURCE_PACKAGE, BuildType.DOXYGEN]:
    mod = Module(module, env,
                 sources = source_files,
                 public_inc_dirs = public_include_dirs,
                 private_inc_dirs = [] )
    product = mod.build(env)
    Return ('product')
else:
    for cp in public_include_dirs:
        env.Append(CPPPATH = [ cp ])
    Return ('source_files')
